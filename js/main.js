// Generated by CoffeeScript 1.3.3
(function() {

  require(['jquery', 'game', 'scene', 'renderer', 'player', 'creature', 'wizard', 'lumberjack', 'stats'], function($, g, s, r, player, Creature, wizard, Lumberjack, Stats) {
    var animate, change_keys, keys_down, load_music, load_textures, music, render, stats, tick;
    load_textures = function() {
      var texture_context, textures;
      textures = new Image;
      textures.src = 'img/textures.png';
      window.texture_canvas = $('<canvas>')[0];
      texture_context = texture_canvas.getContext('2d');
      return textures.onload = function() {
        texture_canvas.height = textures.height;
        texture_canvas.width = textures.width;
        texture_context.drawImage(textures, 0, 0);
        return animate();
      };
    };
    music = null;
    load_music = function() {
      music = new Audio('audio/main.ogg');
      music.addEventListener('ended', function() {
        this.currentTime = 0;
        return this.play();
      }, false);
      music.muted = true;
      return music.play();
    };
    keys_down = {
      w: false,
      a: false,
      s: false,
      d: false,
      l: false,
      k: false
    };
    tick = 0;
    render = function(time) {
      var axis, creature, direction, npc, object, row, tile, x, y, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3;
      stats.begin();
      if (keys_down.w) {
        player.move('y', -1);
      }
      if (keys_down.a) {
        player.move('x', -1);
      }
      if (keys_down.s) {
        player.move('y', 1);
      }
      if (keys_down.d) {
        player.move('x', 1);
      }
      if (tick % 20 === 0) {
        if (keys_down.l) {
          s.current.creatures.push(new Creature({
            x: player.in_front.x,
            y: player.in_front.y
          }));
        }
        if (keys_down.k) {
          player.interact();
        }
      }
      r.clear();
      _ref = s.current.tiles;
      for (y = _i = 0, _len = _ref.length; _i < _len; y = ++_i) {
        row = _ref[y];
        for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
          tile = row[x];
          r.draw_block(x, y, tile);
        }
      }
      _ref1 = s.current.objects;
      for (y = _k = 0, _len2 = _ref1.length; _k < _len2; y = ++_k) {
        row = _ref1[y];
        for (x = _l = 0, _len3 = row.length; _l < _len3; x = ++_l) {
          object = row[x];
          r.draw_object(x, y, object);
        }
      }
      _ref2 = s.current.creatures;
      for (_m = 0, _len4 = _ref2.length; _m < _len4; _m++) {
        creature = _ref2[_m];
        if (tick % 10 === 0) {
          if (Math.random() > 0.9) {
            axis = Math.random() > 0.5 ? 'x' : 'y';
            direction = Math.random() > 0.5 ? 1 : -1;
            creature.move(axis, direction);
          }
        }
        creature.animate();
      }
      if (s.current.npcs) {
        _ref3 = s.current.npcs;
        for (_n = 0, _len5 = _ref3.length; _n < _len5; _n++) {
          npc = _ref3[_n];
          npc.animate();
        }
      }
      player.animate();
      r.draw_inventory(player);
      tick += 1;
      return stats.end();
    };
    animate = function(time) {
      requestAnimationFrame(animate);
      return render(time);
    };
    change_keys = function(event) {
      var code, is_down, type;
      type = event.type;
      code = event.which;
      is_down = type === 'keydown';
      if (code === 87 || code === 65 || code === 83 || code === 68 || code === 75 || code === 76) {
        event.preventDefault();
        switch (code) {
          case 87:
            keys_down.w = is_down;
            break;
          case 65:
            keys_down.a = is_down;
            break;
          case 83:
            keys_down.s = is_down;
            break;
          case 68:
            keys_down.d = is_down;
            break;
          case 75:
            keys_down.k = is_down;
            break;
          case 76:
            keys_down.l = is_down;
        }
      }
      if (is_down) {
        if (code === 77) {
          return music.muted = !music.muted;
        }
      }
    };
    stats = null;
    return $(document).ready(function() {
      var lumberjack;
      r.init();
      s.add_creatures(Creature);
      lumberjack = new Lumberjack;
      s.current.npcs = [wizard, lumberjack];
      $body.keydown(change_keys);
      $body.keyup(change_keys);
      $('#response').keyup(function(event) {
        if (event.which === 13) {
          debugger;
          if (lumberjack.selling) {
            return lumberjack.sell_to(parseInt($(this).val()));
          }
        }
      });
      load_textures();
      load_music();
      stats = new Stats;
      return $(stats.domElement).addClass('stats').appendTo($body);
    });
  });

}).call(this);
