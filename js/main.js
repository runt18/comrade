// Generated by CoffeeScript 1.3.3
(function() {

  require(['jquery', 'player', 'creature'], function($, Player, Creature) {
    var animate, change_keys, draw_block, keys_down, load_textures, render, tick;
    window.Creature = Creature;
    draw_block = function(dx, dy, type) {
      var sx, sy;
      switch (type) {
        case 1:
          sx = 1;
          sy = 1;
          break;
        case 2:
          sx = 2;
          sy = 1;
          break;
        case 3:
          sx = 3;
          sy = 1;
      }
      return ctx.drawImage(texture_canvas, sx * tile_size, sy * tile_size, tile_size, tile_size, dx * tile_size, dy * tile_size, tile_size, tile_size);
    };
    load_textures = function() {
      var texture_context, textures;
      textures = new Image;
      textures.src = 'img/sprites/textures.png';
      window.texture_canvas = $('<canvas>')[0];
      texture_context = texture_canvas.getContext('2d');
      return textures.onload = function() {
        texture_canvas.height = textures.height;
        texture_canvas.width = textures.width;
        texture_context.drawImage(textures, 0, 0);
        load_scene();
        return window.player = new Player;
      };
    };
    keys_down = {
      w: false,
      a: false,
      s: false,
      d: false,
      l: false
    };
    tick = 0;
    render = function(time) {
      var axis, creature, direction, row, tile, x, y, _i, _j, _k, _len, _len1, _len2;
      if (keys_down.w) {
        player.move('y', -1);
      }
      if (keys_down.a) {
        player.move('x', -1);
      }
      if (keys_down.s) {
        player.move('y', 1);
      }
      if (keys_down.d) {
        player.move('x', 1);
      }
      ctx.clearRect(0, 0, screen_width, screen_height);
      for (y = _i = 0, _len = scene.length; _i < _len; y = ++_i) {
        row = scene[y];
        for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
          tile = row[x];
          draw_block(x, y, tile);
        }
      }
      for (_k = 0, _len2 = creatures.length; _k < _len2; _k++) {
        creature = creatures[_k];
        if (tick % 10 === 0) {
          if (Math.random() > 0.9) {
            axis = Math.random() > 0.5 ? 'x' : 'y';
            direction = Math.random() > 0.5 ? 1 : -1;
            creature.move(axis, direction);
          }
        }
        creature.animate();
      }
      player.animate();
      return tick += 1;
    };
    animate = function(time) {
      requestAnimationFrame(animate);
      return render(time);
    };
    change_keys = function(event) {
      var c, code, creature, is_down, tile, type, _i, _len;
      type = event.type;
      code = event.which;
      is_down = type === 'keydown';
      if (code === 87 || code === 65 || code === 83 || code === 68 || code === 76) {
        event.preventDefault();
        switch (code) {
          case 87:
            keys_down.w = is_down;
            break;
          case 65:
            keys_down.a = is_down;
            break;
          case 83:
            keys_down.s = is_down;
            break;
          case 68:
            keys_down.d = is_down;
        }
      }
      if (is_down) {
        if (code === 75 || code === 76) {
          event.preventDefault();
          switch (code) {
            case 76:
              c = new Creature({
                x: player.in_front.x,
                y: player.in_front.y
              });
              return c.add();
            case 75:
              for (_i = 0, _len = creatures.length; _i < _len; _i++) {
                creature = creatures[_i];
                if (player.in_front.x === creature.pos.x && player.in_front.y === creature.pos.y) {
                  creature.health -= player.attack;
                  if (creature.health <= 0) {
                    creature.remove();
                  }
                }
              }
              tile = world[player.in_front.y][player.in_front.x];
              switch (tile) {
                case 2:
                  return player.inventory.push(new Fishdddwwddwwssssas);
                case 3:
                  return player.inventory.push(new Rock);
              }
          }
        }
      }
    };
    return $(document).ready(function() {
      var $body, $canvas, canvas;
      $canvas = $('<canvas>');
      $body = $('body');
      $('#game').html($canvas);
      canvas = $canvas[0];
      canvas.width = screen_width;
      canvas.height = screen_height;
      window.ctx = canvas.getContext('2d');
      $body.keydown(change_keys);
      $body.keyup(change_keys);
      load_textures();
      return animate();
    });
  });

}).call(this);
