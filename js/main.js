// Generated by CoffeeScript 1.3.3
(function() {

  require(['jquery', 'game', 'player', 'creature'], function($, g, player, Creature) {
    var animate, change_keys, draw_block, draw_inventory, keys_down, load_textures, render, tick;
    draw_block = function(dx, dy, type) {
      var sx, sy, ts;
      sy = 1;
      switch (type) {
        case 1:
          sx = 1;
          break;
        case 2:
          sx = 2;
          break;
        case 3:
          sx = 3;
      }
      ts = g.tile_size;
      return g.ctx.drawImage(texture_canvas, sx * ts, sy * ts, ts, ts, dx * ts, dy * ts, ts, ts);
    };
    load_textures = function() {
      var texture_context, textures;
      textures = new Image;
      textures.src = 'img/textures.png';
      window.texture_canvas = $('<canvas>')[0];
      texture_context = texture_canvas.getContext('2d');
      return textures.onload = function() {
        var x;
        texture_canvas.height = textures.height;
        texture_canvas.width = textures.width;
        texture_context.drawImage(textures, 0, 0);
        g.load_scene();
        window.creatures = (function() {
          var _i, _ref, _results;
          _results = [];
          for (x = _i = 1, _ref = g.num_creatures; 1 <= _ref ? _i <= _ref : _i >= _ref; x = 1 <= _ref ? ++_i : --_i) {
            _results.push(new Creature);
          }
          return _results;
        })();
        return animate();
      };
    };
    draw_inventory = function() {
      var item, sx, sy, ts, x, _i, _len, _ref, _results;
      g.ctx.fillStyle = 'grey';
      g.ctx.fillRect(0, g.screen_height - g.ui_height, g.screen_width, g.screen_height);
      g.ctx.fillStyle = 'blue';
      ts = g.tile_size;
      _ref = player.inventory;
      _results = [];
      for (x = _i = 0, _len = _ref.length; _i < _len; x = ++_i) {
        item = _ref[x];
        sy = 3;
        switch (item.id) {
          case 1:
            sx = 1;
            break;
          case 2:
            sx = 2;
            break;
          case 3:
            sx = 3;
        }
        _results.push(g.ctx.drawImage(texture_canvas, sx * ts, sy * ts, ts, ts, x * ts, g.screen_height - g.ui_height, ts, ts));
      }
      return _results;
    };
    keys_down = {
      w: false,
      a: false,
      s: false,
      d: false,
      l: false,
      k: false
    };
    tick = 0;
    render = function(time) {
      var axis, creature, direction, row, tile, x, y, _i, _j, _k, _len, _len1, _len2, _ref;
      if (keys_down.w) {
        player.move('y', -1);
      }
      if (keys_down.a) {
        player.move('x', -1);
      }
      if (keys_down.s) {
        player.move('y', 1);
      }
      if (keys_down.d) {
        player.move('x', 1);
      }
      if (tick % 200 === 0) {
        if (keys_down.l) {
          creatures.push(new Creature({
            x: player.in_front.x,
            y: player.in_front.y
          }));
        }
        if (keys_down.k) {
          player.interact();
        }
      }
      g.ctx.clearRect(0, 0, g.screen_width, g.screen_height);
      _ref = g.scene;
      for (y = _i = 0, _len = _ref.length; _i < _len; y = ++_i) {
        row = _ref[y];
        for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
          tile = row[x];
          draw_block(x, y, tile);
        }
      }
      for (_k = 0, _len2 = creatures.length; _k < _len2; _k++) {
        creature = creatures[_k];
        if (tick % 10 === 0) {
          if (Math.random() > 0.9) {
            axis = Math.random() > 0.5 ? 'x' : 'y';
            direction = Math.random() > 0.5 ? 1 : -1;
            creature.move(axis, direction);
          }
        }
        creature.animate();
      }
      player.animate();
      draw_inventory();
      return tick += 1;
    };
    animate = function(time) {
      requestAnimationFrame(animate);
      return render(time);
    };
    change_keys = function(event) {
      var code, is_down, type;
      type = event.type;
      code = event.which;
      is_down = type === 'keydown';
      if (code === 87 || code === 65 || code === 83 || code === 68 || code === 75 || code === 76) {
        event.preventDefault();
        switch (code) {
          case 87:
            return keys_down.w = is_down;
          case 65:
            return keys_down.a = is_down;
          case 83:
            return keys_down.s = is_down;
          case 68:
            return keys_down.d = is_down;
          case 75:
            return keys_down.k = is_down;
          case 76:
            return keys_down.l = is_down;
        }
      }
    };
    return $(document).ready(function() {
      var $body, $canvas, canvas;
      $canvas = $('<canvas>');
      $body = $('body');
      $('#game').html($canvas);
      canvas = $canvas[0];
      canvas.width = g.screen_width;
      canvas.height = g.screen_height;
      g.ctx = canvas.getContext('2d');
      $body.keydown(change_keys);
      $body.keyup(change_keys);
      return load_textures();
    });
  });

}).call(this);
