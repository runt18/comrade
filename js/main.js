// Generated by CoffeeScript 1.3.3
(function() {

  require(['jquery', 'player', 'creature'], function($, Player, Creature) {
    var animate, change_keys, draw_block, keys_down, player, render, tick;
    window.Creature = Creature;
    draw_block = function(x, y, type) {
      switch (type) {
        case 1:
          ctx.fillStyle = 'green';
          break;
        case 2:
          ctx.fillStyle = 'blue';
          break;
        case 3:
          ctx.fillStyle = 'brown';
      }
      return ctx.fillRect(x * tile_size, y * tile_size, tile_size, tile_size);
    };
    load_scene();
    player = new Player;
    keys_down = {
      w: false,
      a: false,
      s: false,
      d: false,
      l: false
    };
    tick = 0;
    render = function(time) {
      var axis, creature, direction, row, tile, x, y, _i, _j, _k, _len, _len1, _len2;
      if (keys_down.w) {
        player.move('y', -1);
      }
      if (keys_down.a) {
        player.move('x', -1);
      }
      if (keys_down.s) {
        player.move('y', 1);
      }
      if (keys_down.d) {
        player.move('x', 1);
      }
      if (tick % 10 === 0) {
        if (keys_down.l) {
          creatures.push(new Creature({
            x: player.in_front.x,
            y: player.in_front.y
          }));
        }
      }
      ctx.clearRect(0, 0, screen_width, screen_height);
      for (y = _i = 0, _len = scene.length; _i < _len; y = ++_i) {
        row = scene[y];
        for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
          tile = row[x];
          draw_block(x, y, tile);
        }
      }
      for (_k = 0, _len2 = creatures.length; _k < _len2; _k++) {
        creature = creatures[_k];
        if (tick % 10 === 0) {
          if (Math.random() > 0.9) {
            axis = Math.random() > 0.5 ? 'x' : 'y';
            direction = Math.random() > 0.5 ? 1 : -1;
            creature.move(axis, direction);
          }
        }
        creature.animate();
      }
      player.animate();
      return tick += 1;
    };
    animate = function(time) {
      requestAnimationFrame(animate);
      return render(time);
    };
    change_keys = function(event, is_down) {
      var code;
      code = event.which;
      if (code === 87 || code === 65 || code === 83 || code === 68 || code === 76) {
        event.preventDefault();
        switch (code) {
          case 87:
            return keys_down.w = is_down;
          case 65:
            return keys_down.a = is_down;
          case 83:
            return keys_down.s = is_down;
          case 68:
            return keys_down.d = is_down;
          case 76:
            return keys_down.l = is_down;
        }
      }
    };
    return $(document).ready(function() {
      var $body, $canvas, canvas;
      $canvas = $('<canvas>');
      $body = $('body');
      $('#game').html($canvas);
      canvas = $canvas[0];
      canvas.width = screen_width;
      canvas.height = screen_height;
      window.ctx = canvas.getContext('2d');
      $body.keydown(function(event) {
        return change_keys(event, true);
      });
      $body.keyup(function(event) {
        return change_keys(event, false);
      });
      return animate();
    });
  });

}).call(this);
