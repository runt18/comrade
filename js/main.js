// Generated by CoffeeScript 1.3.3
(function() {

  require(['jquery', 'entity'], function($, Entities) {
    var Creature, Player, animate, creatures, draw_block, num_creatures, player, render, tick, x;
    Player = Entities.Player;
    Creature = Entities.Creature;
    draw_block = function(x, y, type) {
      switch (type) {
        case 1:
          ctx.fillStyle = 'green';
          break;
        case 2:
          ctx.fillStyle = 'blue';
          break;
        case 3:
          ctx.fillStyle = 'brown';
      }
      return ctx.fillRect(x * tile_size, y * tile_size, tile_size, tile_size);
    };
    player = new Player;
    num_creatures = 10;
    creatures = (function() {
      var _i, _results;
      _results = [];
      for (x = _i = 1; 1 <= num_creatures ? _i <= num_creatures : _i >= num_creatures; x = 1 <= num_creatures ? ++_i : --_i) {
        _results.push(new Creature);
      }
      return _results;
    })();
    load_scene();
    key('w', function() {
      if (player.frames_left > 0) {
        return;
      }
      player.axis = 'y';
      player.direction = -1;
      return player.move();
    });
    key('a', function() {
      if (player.frames_left > 0) {
        return;
      }
      player.axis = 'x';
      player.direction = -1;
      return player.move();
    });
    key('s', function() {
      if (player.frames_left > 0) {
        return;
      }
      player.axis = 'y';
      player.direction = 1;
      return player.move();
    });
    key('d', function() {
      if (player.frames_left > 0) {
        return;
      }
      player.axis = 'x';
      player.direction = 1;
      return player.move();
    });
    key('l', function() {
      return creatures.push(new Creature(player.in_front.x, player.in_front.y));
    });
    key('k', function() {
      var creature, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = creatures.length; _i < _len; _i++) {
        creature = creatures[_i];
        if (Math.round(player.in_front.x === Math.round(creature.pos.x && Math.round(player.in_front.y === Math.round(creature.pos.y))))) {
          debugger;
          _results.push(creatures.splice(creatures.indexOf(creature)));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    key('f', function() {
      current_scene.x = current_scene.x === 0 ? 1 : 0;
      return load_scene();
    });
    tick = 0;
    render = function(time) {
      var creature, row, tile, y, _i, _j, _k, _len, _len1, _len2;
      ctx.clearRect(0, 0, screen_width, screen_height);
      for (y = _i = 0, _len = scene.length; _i < _len; y = ++_i) {
        row = scene[y];
        for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
          tile = row[x];
          draw_block(x, y, tile);
        }
      }
      for (_k = 0, _len2 = creatures.length; _k < _len2; _k++) {
        creature = creatures[_k];
        if (tick % 10 === 0) {
          if (Math.random() > 0.9) {
            creature.axis = Math.random() > 0.5 ? 'x' : 'y';
            creature.direction = Math.random() > 0.5 ? 1 : -1;
            creature.move();
          }
        }
        creature.animate();
      }
      player.animate();
      return tick += 1;
    };
    animate = function(time) {
      requestAnimationFrame(animate);
      return render(time);
    };
    return $(document).ready(function() {
      var $canvas, canvas;
      $canvas = $('<canvas>');
      $('body').append($canvas);
      canvas = $canvas[0];
      canvas.width = screen_width;
      canvas.height = screen_height;
      window.ctx = canvas.getContext('2d');
      return animate();
    });
  });

}).call(this);
