// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['game'], function(g) {
    var Scene, Scenes;
    Scene = (function() {

      function Scene(x, y) {
        this.x = x;
        this.y = y;
        this.tiles = [];
        this.empty_tiles = [];
        this.objects = [];
        this.load();
      }

      Scene.prototype.matrix_sub_area = function(matrix, x, y, width, height) {
        var row, _i, _len, _ref, _results;
        _ref = matrix.slice(y, (y + height - 1) + 1 || 9e9);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          _results.push(row.slice(x, (x + width - 1) + 1 || 9e9));
        }
        return _results;
      };

      Scene.prototype.load = function() {
        var cell, row, x, y, _i, _len, _ref, _results;
        this.tiles = this.matrix_sub_area(g.world, this.x * g.width, this.y * g.height, g.width, g.height);
        this.objects = this.matrix_sub_area(g.objects, this.x * g.width, this.y * g.height, g.width, g.height);
        _ref = this.tiles;
        _results = [];
        for (y = _i = 0, _len = _ref.length; _i < _len; y = ++_i) {
          row = _ref[y];
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
              cell = row[x];
              if (__indexOf.call(g.solid_things, cell) < 0) {
                _results1.push(this.empty_tiles.push({
                  x: x,
                  y: y
                }));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      return Scene;

    })();
    Scenes = (function() {

      function Scenes() {
        var x, y, _i, _j, _ref, _ref1;
        this.num = 2;
        this.pos = {
          x: 0,
          y: 0
        };
        this.scenes = [];
        for (x = _i = 0, _ref = this.num - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
          this.scenes[x] = [];
          for (y = _j = 0, _ref1 = this.num - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
            this.scenes[x][y] = new Scene(x, y);
          }
        }
        this.set();
      }

      Scenes.prototype.set = function() {
        return this.current = this.scenes[this.pos.x][this.pos.y];
      };

      return Scenes;

    })();
    return new Scenes;
  });

}).call(this);
