// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['entity', 'game', 'scene', 'graph', 'astar'], function(Entity, g, s, Graph, astar) {
    var Creature;
    return Creature = (function(_super) {

      __extends(Creature, _super);

      function Creature() {
        return Creature.__super__.constructor.apply(this, arguments);
      }

      Creature.prototype.move_scene = function() {};

      Creature.prototype.set_stats = function() {
        this.health = 5;
        this.attack = 1;
        this.pathfind();
        return this.pathfinding = false;
      };

      Creature.prototype.create_images = function() {
        return this.images = {
          up: {
            x: 1,
            y: 4
          },
          left: {
            x: 3,
            y: 4
          },
          down: {
            x: 2,
            y: 4
          },
          right: {
            x: 4,
            y: 4
          }
        };
      };

      Creature.prototype.pathfind = function() {
        var end, graph, start;
        graph = new Graph(g.objects);
        start = graph.nodes[this.pos.x][this.pos.y];
        end = s.current.empty_tiles[Math.floor(Math.random() * s.current.empty_tiles.length)];
        end = graph.nodes[end.x][end.y];
        this.path = astar.search(graph.nodes, start, end);
        this.pathi = 0;
        return this.pathfinding = true;
      };

      Creature.prototype.move_along_path = function() {
        var axis, direction, next_point;
        next_point = this.path[this.pathi];
        if (next_point.x === Math.round(this.pos.x)) {
          direction = next_point.y - this.pos.y;
          axis = 'y';
        } else {
          direction = next_point.x - this.pos.x;
          axis = 'x';
        }
        this.move(axis, direction);
        this.pathi += 1;
        if (this.pathi === this.path.length) {
          return this.pathfinding = false;
        }
      };

      return Creature;

    })(Entity);
  });

}).call(this);
