// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['entity', 'game'], function(Entity, g) {
    var Player;
    Player = (function(_super) {

      __extends(Player, _super);

      function Player() {
        return Player.__super__.constructor.apply(this, arguments);
      }

      Player.prototype.move_scene = function() {
        var item, new_scene, _i, _len, _ref;
        new_scene = false;
        _ref = [
          {
            axis: 'x',
            dimension: g.width
          }, {
            axis: 'y',
            dimension: g.height
          }
        ];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (this.pos[item.axis] === 0 && this.axis === item.axis && this.direction === -1) {
            this.pos[item.axis] = item.dimension;
            g.current_scene[item.axis] -= 1;
            new_scene = true;
          }
          if (this.pos[item.axis] === item.dimension - 1 && this.axis === item.axis && this.direction === 1) {
            this.pos[item.axis] = -1;
            g.current_scene[item.axis] += 1;
            new_scene = true;
          }
        }
        if (new_scene) {
          return g.load_scene();
        }
      };

      Player.prototype.set_stats = function() {
        this.health = 10;
        return this.attack = 2;
      };

      Player.prototype.interact = function() {
        var creature, tile, _i, _len;
        for (_i = 0, _len = creatures.length; _i < _len; _i++) {
          creature = creatures[_i];
          if (this.in_front.x === creature.pos.x && this.in_front.y === creature.pos.y) {
            creature.health -= this.attack;
            if (creature.health <= 0) {
              creature.remove();
            }
          }
        }
        tile = g.world[this.in_front.y][this.in_front.x];
        switch (tile) {
          case 2:
            return this.inventory.push(new Fish);
          case 3:
            return this.inventory.push(new Rock);
        }
      };

      return Player;

    })(Entity);
    return new Player;
  });

}).call(this);
