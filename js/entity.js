// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['game', 'scene', 'renderer'], function(g, s, r) {
    var Entity, Slot;
    Slot = (function() {

      function Slot() {
        this.item = {
          id: 0
        };
        this.count = 0;
      }

      return Slot;

    })();
    return Entity = (function() {

      function Entity(pos, scene_pos) {
        var x;
        this.pos = pos;
        this.scene_pos = scene_pos;
        this.create_images();
        this.image = this.images.down;
        this.frames_left = 0;
        this.set_position();
        this.axis = 'x';
        this.direction = 1;
        this.set_in_front();
        this.set_stats();
        this.inventory = (function() {
          var _i, _results;
          _results = [];
          for (x = _i = 1; _i <= 10; x = ++_i) {
            _results.push(new Slot);
          }
          return _results;
        })();
      }

      Entity.prototype.set_position = function() {
        var index, scene;
        if (this.scene_pos) {
          scene = s.scenes[this.scene_pos.x][this.scene_pos.y];
        } else {
          scene = s.current;
        }
        if (!this.pos) {
          index = Math.floor(Math.random() * scene.empty_tiles.length);
          return this.pos = scene.empty_tiles.splice(index, 1)[0];
        }
      };

      Entity.prototype.set_image = function() {
        var image;
        switch (this.axis) {
          case 'x':
            image = this.direction === 1 ? 'right' : 'left';
            break;
          case 'y':
            image = this.direction === 1 ? 'down' : 'up';
        }
        return this.image = this.images[image];
      };

      Entity.prototype.set_in_front = function() {
        switch (this.axis) {
          case 'x':
            this.in_front = {
              x: this.pos.x + this.direction,
              y: this.pos.y
            };
            break;
          case 'y':
            this.in_front = {
              x: this.pos.x,
              y: this.pos.y + this.direction
            };
        }
        try {
          this.next_tile = s.current.tiles[this.in_front.x][this.in_front.y];
          return this.next_object = s.current.objects[this.in_front.x][this.in_front.y];
        } catch (TypeError) {

        }
      };

      Entity.prototype.snap_to_grid = function() {
        this.pos.x = Math.round(this.pos.x);
        return this.pos.y = Math.round(this.pos.y);
      };

      Entity.prototype.draw = function() {
        return r.draw_texture(this.image.x, this.image.y, this.pos.x, this.pos.y);
      };

      Entity.prototype.animate = function() {
        if (this.frames_left > 0) {
          this.pos[this.axis] += this.direction * 0.1;
          this.frames_left -= 1;
        } else {
          this.snap_to_grid();
          this.set_in_front();
        }
        return this.draw();
      };

      Entity.prototype.move = function(axis, direction) {
        var _ref, _ref1;
        if (this.frames_left > 0) {
          return;
        }
        this.snap_to_grid();
        this.axis = axis;
        this.direction = direction;
        this.set_image();
        this.move_scene();
        this.set_in_front();
        if (!((_ref = this.next_tile, __indexOf.call(g.solid_things, _ref) >= 0) || (_ref1 = this.next_object, __indexOf.call(g.solid_things, _ref1) >= 0))) {
          return this.frames_left = 10;
        }
      };

      return Entity;

    })();
  });

}).call(this);
